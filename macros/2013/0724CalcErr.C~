{
  //string namefile = "bigntuple";
  string namefile = "070713bigntuple";
  //string namefile = "0724bigntuple";
  
  // True Quantities
  Int_t runNum;
  Int_t eventNum;
  Int_t triggerNum;

  Int_t truePDG;
  Double_t trueP;
  Double_t trueE;
  Double_t trueVtxX;
  Double_t trueVtxY;
  Double_t trueVtxZ;
  Double_t trueEndX;
  Double_t trueEndY;
  Double_t trueEndZ;
  Double_t trueDirX;
  Double_t trueDirY;
  Double_t trueDirZ;

  Int_t nDigits;
  Int_t nFilterDigits;
  Int_t foundVertex;
  Int_t foundDirection;

  Double_t recoVtxX;
  Double_t recoVtxY;
  Double_t recoVtxZ;
  Double_t recoVtxTime;
  Double_t recoVtxFOM;
  Double_t recoDirX;
  Double_t recoDirY;
  Double_t recoDirZ;


  // Testing Reconstruction
  //Double_t simpleVtxX;
  //Double_t simpleVtxY;
  //Double_t simpleVtxZ;
  Double_t pointVtxX;
  Double_t pointVtxY;
  Double_t pointVtxZ;
  Double_t pointVtxFOM;
  Int_t pointVtxSteps;
  Int_t pointVtxPass;
  //Double_t simpleDirX;
  //Double_t simpleDirY;
  //Double_t simpleDirZ;
  Double_t pointDirX;
  Double_t pointDirY;
  Double_t pointDirZ;
  //Double_t pointDirAngle;
  //Double_t pointDirFOM;
  //Int_t pointDirSteps;
  //Int_t pointDirPass;
  Double_t extendedVtxX;
  Double_t extendedVtxY;
  Double_t extendedVtxZ;
  Double_t extendedVtxFOM;
  Double_t extendedDirX;
  Double_t extendedDirY;
  Double_t extendedDirZ;
  //Double_t extendedDirAngle;
  Int_t extendedVtxSteps;
  Int_t extendedVtxPass;
  

  //Double_t simpleDirX_from_trueVtx;
  //Double_t simpleDirY_from_trueVtx;
  //Double_t simpleDirZ_from_trueVtx;
  //Double_t pointDirX_from_trueVtx;
  //Double_t pointDirY_from_trueVtx;
  //Double_t pointDirZ_from_trueVtx;
  //Double_t pointDirFOM_from_trueVtx;
  //Double_t extendedVtxX_from_trueVtx;
  //Double_t extendedVtxY_from_trueVtx;
  //Double_t extendedVtxZ_from_trueVtx;
  //Double_t extendedVtxFOM_from_trueVtx;

  TChain* RecoChain = new TChain("ntuple","chain");

  // cosmic muons
  //RecoChain->Add(("/lbne/data/users/gsdavies/reco/single/muminus/"+namefile+"*.root").c_str());
  //RecoChain->Add(("/lbne/data/users/gsdavies/reco/single/muplus/"+namefile+"*.root").c_str());
  //RecoChain->Add("/lbne/data/users/gsdavies/reco/single/muminus/reco_muon_minus_000400MeV_200kton*.root");
  //RecoChain->Add(("/lbne/data/users/omanghel/"+namefile+".root").c_str());
  RecoChain->Add(("/lbne/data/users/ecatanom/test/"+namefile+".root").c_str());
  //RecoChain->Add(("/lbne/app/users/txin/WCSimAnalysis_bkp20121019/plotroot/"+namefile+".root").c_str());

  RecoChain->SetBranchAddress("run",&runNum);
  RecoChain->SetBranchAddress("event",&eventNum);
  RecoChain->SetBranchAddress("trigger",&triggerNum);
  RecoChain->SetBranchAddress("truePDG",&truePDG);
  RecoChain->SetBranchAddress("trueP",&trueP);
  RecoChain->SetBranchAddress("trueE",&trueE);
  RecoChain->SetBranchAddress("trueVtxX",&trueVtxX);
  RecoChain->SetBranchAddress("trueVtxY",&trueVtxY);
  RecoChain->SetBranchAddress("trueVtxZ",&trueVtxZ);
  RecoChain->SetBranchAddress("trueEndX",&trueEndX);
  RecoChain->SetBranchAddress("trueEndY",&trueEndY);
  RecoChain->SetBranchAddress("trueEndZ",&trueEndZ);
  RecoChain->SetBranchAddress("trueDirX",&trueDirX);
  RecoChain->SetBranchAddress("trueDirY",&trueDirY);
  RecoChain->SetBranchAddress("trueDirZ",&trueDirZ);
  RecoChain->SetBranchAddress("nDigits",&nDigits);
  RecoChain->SetBranchAddress("nFilterDigits",&nFilterDigits);
  RecoChain->SetBranchAddress("foundVertex",&foundVertex);
  RecoChain->SetBranchAddress("foundDirection",&foundDirection);
  RecoChain->SetBranchAddress("recoVtxX",&recoVtxX);
  RecoChain->SetBranchAddress("recoVtxY",&recoVtxY);
  RecoChain->SetBranchAddress("recoVtxZ",&recoVtxZ);
  RecoChain->SetBranchAddress("recoVtxTime",&recoVtxTime);
  RecoChain->SetBranchAddress("recoVtxFOM",&recoVtxFOM);
  RecoChain->SetBranchAddress("recoDirX",&recoDirX);
  RecoChain->SetBranchAddress("recoDirY",&recoDirY);
  RecoChain->SetBranchAddress("recoDirZ",&recoDirZ);

  //RecoChain->SetBranchAddress("simpleVtxX",&simpleVtxX);
  //RecoChain->SetBranchAddress("simpleVtxY",&simpleVtxY);
  //RecoChain->SetBranchAddress("simpleVtxZ",&simpleVtxZ);
  RecoChain->SetBranchAddress("pointVtxX",&pointVtxX);
  RecoChain->SetBranchAddress("pointVtxY",&pointVtxY);
  RecoChain->SetBranchAddress("pointVtxZ",&pointVtxZ);
  RecoChain->SetBranchAddress("pointVtxFOM",&pointVtxFOM);
  RecoChain->SetBranchAddress("pointVtxSteps",&pointVtxSteps);
  RecoChain->SetBranchAddress("pointVtxPass",&pointVtxPass);
  //RecoChain->SetBranchAddress("simpleDirX",&simpleDirX);
  //RecoChain->SetBranchAddress("simpleDirY",&simpleDirY);
  //RecoChain->SetBranchAddress("simpleDirZ",&simpleDirZ);
  RecoChain->SetBranchAddress("pointDirX",&pointDirX);
  RecoChain->SetBranchAddress("pointDirY",&pointDirY);
  RecoChain->SetBranchAddress("pointDirZ",&pointDirZ);
  //RecoChain->SetBranchAddress("pointDirAngle",&pointDirAngle);
  //RecoChain->SetBranchAddress("pointDirFOM",&pointDirFOM);
  //RecoChain->SetBranchAddress("pointDirSteps",&pointDirSteps);
  //RecoChain->SetBranchAddress("pointDirPass",&pointDirPass);
  RecoChain->SetBranchAddress("extendedVtxX",&extendedVtxX);
  RecoChain->SetBranchAddress("extendedVtxY",&extendedVtxY);
  RecoChain->SetBranchAddress("extendedVtxZ",&extendedVtxZ);
  RecoChain->SetBranchAddress("extendedVtxFOM",&extendedVtxFOM);
  RecoChain->SetBranchAddress("extendedDirX",&extendedDirX);
  RecoChain->SetBranchAddress("extendedDirY",&extendedDirY);
  RecoChain->SetBranchAddress("extendedDirZ",&extendedDirZ);
  //RecoChain->SetBranchAddress("extendedDirAngle",&extendedDirAngle);
  RecoChain->SetBranchAddress("extendedVtxSteps",&extendedVtxSteps);
  RecoChain->SetBranchAddress("extendedVtxPass",&extendedVtxPass);


  Int_t nEvent = RecoChain->GetEntries();
  Double_t *ArrExtendedDelta = new Double_t[nEvent];
  Double_t *ArrExtendedAngle = new Double_t[nEvent];
  Double_t *ArrExtendedPara = new Double_t[nEvent];
  Double_t *ArrExtendedPerp = new Double_t[nEvent];
  Int_t *ArrIndex1 = new Int_t[nEvent];
  Int_t *ArrIndex2 = new Int_t[nEvent];
  Int_t *ArrIndex3 = new Int_t[nEvent];
  Int_t *ArrIndex4 = new Int_t[nEvent];
  for( Int_t l=0;l<nEvent;l++ ){
     ArrExtendedDelta[l]=0.0;
     ArrExtendedAngle[l]=0.0;
     ArrExtendedPara[l]=0.0;
     ArrExtendedPerp[l]=0.0;
     ArrIndex1[l]=l;
     ArrIndex2[l]=l;
     ArrIndex3[l]=l;
     ArrIndex4[l]=l;
  }
  const Int_t nbin = 5000;
  Double_t min = 0.0;
  Double_t max = 100.0;
  Double_t range = max - min;
  TH1D* testnonh = new TH1D("testnonh","",nbin,min,max);
  TH1D* testconh = new TH1D("testconh","",nbin,min,max);
  TH2D* test2conh = new TH2D("test2conh","",200,0.0,600.0,20,0.0,2.0);
  TH2D* test2nonh = new TH2D("test2nonh","",200,0.0,600.0,20,0.0,2.0);

  Int_t ElectronID = +11;
  Int_t MuonID = +13;

  Double_t phi = 0.0;
  Double_t sinth;

  Double_t fLimit = 0.999999;

  Double_t ctr_extended_fit = 0.0;
  Double_t ctr_extended_fit_pass = 0.0;
  Double_t ctr_extended_fit_pass_frac = 0.0;
 
  Double_t drmax = -999.9;
  Double_t radius = 3168.94; //3168.94 for 1200MeV, 3112.95 for 400MeV
  Double_t height = 3833.94; //3833.94 for 1200MeV, 3999.04 for 400MeV
  Int_t aaa = 0;
  Int_t bbb = 0;
  Int_t ccc = 0;


  //Erika
  TH2D* ParaPerpC = new TH2D("PPC","",200,0.0,600.0,200,0.0,250.0);
  TH2D* ParaPerpNC = new TH2D("PPNC","",200,0.0,600.0,200,0.0,250.0);
  TH1D* TotalDistC = new TH1D("DC","",200,0,800);
  TH1D* TotalDistNC = new TH1D("DNC","",200,0,800);
  TH1D* NFilterDigitsC = new TH1D("NFDC","",100,0,12000);
  TH1D* NFilterDigitsNC = new TH1D("NFDNC","",100,0,12000);

  for( Int_t i=0; i<RecoChain->GetEntries(); i++ ){
  //for( Int_t i=0; i<100; i++ ){
    RecoChain->GetEntry(i);

    // fill histograms
    // ===============
    if( 1 ){//fabs(truePDG)==MuonID ){

      // vertex angles
      // =============
      phi = 0.0;
      if( trueVtxX!=0.0 ){
        phi = atan(trueVtxY/trueVtxX);
      }
      if( trueVtxX<=0.0 ){
        if( trueVtxY>0.0 ) phi += TMath::Pi();
        if( trueVtxY<0.0 ) phi -= TMath::Pi();
      }
      phi *= 180.0/TMath::Pi();

      phi = 0.0;
      if( trueDirX!=0.0 ){
        phi = atan(trueDirY/trueDirX);
      }
      if( trueDirX<=0.0 ){
        if( trueDirY>0.0 ) phi += TMath::Pi();
        if( trueDirY<0.0 ) phi -= TMath::Pi();
      }
      phi *= 180.0/TMath::Pi();


      // compare reco with truth
      // =======================

      // truth
      Double_t dx0 = trueEndX - trueVtxX;
      Double_t dy0 = trueEndY - trueVtxY;
      Double_t dz0 = trueEndZ - trueVtxZ;
      Double_t ds0 = sqrt( dx0*dx0 + dy0*dy0 + dz0*dz0 );
      Double_t px0 = dx0/ds0;
      Double_t py0 = dy0/ds0;
      Double_t pz0 = dz0/ds0;
      
      Double_t midx = (trueEndX + trueVtxX)*0.5;
      Double_t midy = (trueEndY + trueVtxY)*0.5;
      Double_t midz = (trueEndZ + trueVtxZ)*0.5;

      Double_t costh0 = px0*trueDirX+py0*trueDirY+pz0*trueDirZ; if( costh0>fLimit ) costh0 = fLimit;
      Double_t sinth0 = sqrt(1.0-costh0*costh0);
      Double_t theta0 = (180.0/TMath::Pi())*acos(costh0);

      // simple vertex
      //Double_t dx1 = simpleVtxX - trueVtxX;
      //Double_t dy1 = simpleVtxY - trueVtxY;
      //Double_t dz1 = simpleVtxZ - trueVtxZ;
      //Double_t ds1 = sqrt( dx1*dx1 + dy1*dy1 + dz1*dz1 );
      //Double_t px1 = dx1/ds1;
      //Double_t py1 = dy1/ds1;
      //Double_t pz1 = dz1/ds1;

      //Double_t costh1 = px1*trueDirX+py1*trueDirY+pz1*trueDirZ; if( costh1>fLimit ) costh1 = fLimit;
      //Double_t sinth1 = sqrt(1.0-costh1*costh1);
      //Double_t theta1 = (180.0/TMath::Pi())*acos(costh1);

      // point vertex
      Double_t dx2 = pointVtxX - trueVtxX;
      Double_t dy2 = pointVtxY - trueVtxY;
      Double_t dz2 = pointVtxZ - trueVtxZ;
      Double_t ds2 = sqrt( dx2*dx2 + dy2*dy2 + dz2*dz2 );
      Double_t px2 = dx2/ds2;
      Double_t py2 = dy2/ds2;
      Double_t pz2 = dz2/ds2;

      Double_t costh2 = px2*trueDirX+py2*trueDirY+pz2*trueDirZ; if( costh2>fLimit ) costh2 = fLimit;
      Double_t sinth2 = sqrt(1.0-costh2*costh2);
      Double_t theta2 = (180.0/TMath::Pi())*acos(costh2);

      // simple direction (using truth)
      //Double_t px3 = simpleDirX_from_trueVtx;
      //Double_t py3 = simpleDirY_from_trueVtx;
      //Double_t pz3 = simpleDirZ_from_trueVtx;

      //Double_t costh3 = px3*trueDirX+py3*trueDirY+pz3*trueDirZ; if( costh3>fLimit ) costh3 = fLimit;
      //Double_t theta3 = (180.0/TMath::Pi())*acos(costh3);

      // point direction (using truth)
      //Double_t px4 = pointDirX_from_trueVtx;
      //Double_t py4 = pointDirY_from_trueVtx;
      //Double_t pz4 = pointDirZ_from_trueVtx;

      //Double_t costh4 = px4*trueDirX+py4*trueDirY+pz4*trueDirZ; if( costh4>fLimit ) costh4 = fLimit;
      //Double_t theta4 = (180.0/TMath::Pi())*acos(costh4);

/*      if( eventNum==227 ){
        extendedVtxX = 979.762;
        extendedVtxY = -749.921;
        extendedVtxZ = -503.521;
        recoDirX = 0.943583;
        recoDirY = 0.158726;
        recoDirZ = 0.290615;
      }
*/
      // extended vertex
      Double_t dx5 = extendedVtxX - trueVtxX;
      Double_t dy5 = extendedVtxY - trueVtxY;
      Double_t dz5 = extendedVtxZ - trueVtxZ;
      Double_t ds5 = sqrt( dx5*dx5 + dy5*dy5 + dz5*dz5 );
      Double_t px5 = dx5/ds5;
      Double_t py5 = dy5/ds5;
      Double_t pz5 = dz5/ds5;

      Double_t costh5 = px5*trueDirX+py5*trueDirY+pz5*trueDirZ; if( costh5>fLimit ) costh5 = fLimit;
      Double_t sinth5 = sqrt(1.0-costh5*costh5);
      Double_t theta5 = (180.0/TMath::Pi())*acos(costh5);
     
      // extended direction
      Double_t costh6 = recoDirX*trueDirX + recoDirY*trueDirY + recoDirZ*trueDirZ; 
      if( costh6>fLimit ) costh6 = fLimit;
      Double_t sinth6 = sqrt(1.0-costh6*costh6);
      Double_t theta6 = (180.0/TMath::Pi())*acos(costh6);

/*      if( eventNum == 227 ){
         cout << extendedVtxX << " " << extendedVtxY << " " << extendedVtxZ << endl;
         cout << recoDirX << " " << recoDirY << " " << recoDirZ << endl;
         cout << (ds5*sinth5) << " " << (ds5*costh5) << " " << theta6 << endl;
      }
*/
      Double_t dr0 = sqrt( trueVtxX*trueVtxX + trueVtxY*trueVtxY );
      Double_t dr2 = sqrt( pointVtxX*pointVtxX + pointVtxY*pointVtxY );
      Double_t dr1 = sqrt( trueEndX*trueEndX + trueEndY*trueEndY );
      Double_t dr5 = sqrt( extendedVtxX*extendedVtxX + extendedVtxY*extendedVtxY );
      Double_t DisttoWall = 0.0;
      Double_t DisttoWall2 = 0.0;
      Double_t DisttoWall5 = 0.0;
      Double_t Da = radius - dr0;
      Double_t Db = height - sqrt(trueVtxZ*trueVtxZ);
      Double_t Da2 = radius - dr2;
      Double_t Db2 = height - sqrt(pointVtxZ*pointVtxZ);
      Double_t Da5 = radius - dr5;
      Double_t Db5 = height - sqrt(extendedVtxZ*extendedVtxZ);
      if( Da>Db ) DisttoWall = Db;
      else DisttoWall = Da;
      if( Da2>Db2 ) DisttoWall2 = Db2;
      else DisttoWall2 = Da2;
      if( Da5>Db5 ) DisttoWall5 = Db5;
      else DisttoWall5 = Da5;

      //if( eventNum == 102 ) cout << "102: " << DisttoWall << " " << DisttoWall2 << " " << DisttoWall5 << endl;
      //if( eventNum == 126 ) cout << "126: " << DisttoWall << " " << DisttoWall2 << " " << DisttoWall5 << endl;
      //if( eventNum == 191 ) cout << "191: " << DisttoWall << " " << DisttoWall2 << " " << DisttoWall5 << endl;
      //if( eventNum == 179 ) cout << "179: " << DisttoWall << " " << DisttoWall2 << " " << DisttoWall5 << endl;

      //if( ds0!=0.0 ){
        //if( !foundVertex ) cout << eventNum << " ";//testconh->Fill(nFilterDigits);
        //else testnonh->Fill(ds0);
      //}
      //if( ds5*sqrt(costh5*costh5)>50.0 && extendedVtxPass ) cout << eventNum << " " ;//<< nDigits << " " << nFilterDigits << " " << ds0 << " " << DisttoWall << endl;
      if( drmax<dr1 ) drmax = dr1;
      
      if( !foundVertex && trueVtxZ>0.0 ) aaa++;
      else if( !extendedVtxPass ) bbb++;
      else ccc++;

      Double_t proZ = 0.0;
      Double_t proX = 0.0;
      Double_t proY = 0.0;
      if( trueDirZ>0.0 ) proZ = height;
      else proZ = -height;
      proY = trueVtxY + trueDirY*(proZ-trueVtxZ)/trueDirZ;
      proX = trueVtxX + trueDirX*(proZ-trueVtxZ)/trueDirZ;
      Double_t coss = 0.0;
      Int_t side = 0;
      if( (proX*proX + proY*proY)<(radius*radius) ){ side = 0; coss = sqrt(trueDirZ*trueDirZ); }
      else{
        //Double_t a = trueDirY/trueDirX;
        //Double_t b = trueVtxY*trueVtxX*trueDirY/trueDirX;
        //Double_t c = radius*radius;
        //if( trueDirX==0.0 ){
          //proX = trueVtxX;
          //if( trueDirY>0.0 ){ proY = sqrt(radius*radius-trueVtxX*trueVtxX); }
          //else{ proY = -1.0*sqrt(radius*radius-trueVtxX*trueVtxX); }
        //}
        //else{
          Double_t a = trueDirY/trueDirX;
          Double_t b = trueVtxY - trueVtxX*trueDirY/trueDirX;
          Double_t c = radius*radius;
          if( trueDirX>0.0 ){
            proX = (-2.0*b*a + sqrt(4.0*b*b*a*a - 4.0*(1.0+a*a)*(b*b-c)))/(2.0*(1.0+a*a)); }
          else{
            proX = (-2.0*b*a - sqrt(4.0*b*b*a*a - 4.0*(1.0+a*a)*(b*b-c)))/(2.0*(1.0+a*a)); }       
          proY = trueVtxY + (proX-trueVtxX)*trueDirY/trueDirX;
          proZ = trueVtxZ + (proX-trueVtxX)*trueDirZ/trueDirX; 
       // }
          coss = (proX*trueDirX + proY*trueDirY)/sqrt(proX*proX+proY*proY);
          side = 1;
      }
      coss = acos(coss);
      //cout << costh0 << " " << coss << " " << side << endl;
      // vertex finder
      // =============
      if( foundVertex && DisttoWall2>300.0 ){
      //if( foundVertex ){
        ctr_extended_fit += 1.0;

        if( extendedVtxPass==1 ){
          ctr_extended_fit_pass += 1.0;
          //ArrExtendedPara[i] = TMath::Abs(0.01*(costh5*ds5));
          //ArrExtendedPerp[i] = 0.01*(sinth5*ds5);
          //ArrExtendedAngle[i] = theta6;
          //ArrExtendedDelta[i] = 0.01*ds5;
          //if( ds5*sqrt(costh5*costh5)>25.0 ) testconh->Fill(coss);
          testconh->Fill(ds5*sinth5); 
	  cout <<eventNum <<", ";
	 //  cout << "point"<<ctr_extended_fit << ". " <<eventNum 
// 	       << " para " <<ds2*(TMath::Abs(costh2)) 
// 	       << " perp " << ds2*sinth2<< endl;

	  ParaPerpC->Fill(ds2*(TMath::Abs(costh2)), ds2*sinth2);
	  TotalDistC->Fill(ds2); 
	  NFilterDigitsC->Fill(nFilterDigits);
	  
	  //cout << ctr_extended_fit << ". " <<eventNum 
	  //   << " para " << ds5*costh5 << " perp " << ds5*sinth5<< endl;
          //test2conh->Fill(DisttoWall,trueDirZ);
          //testh->Fill(0.01*(TMath::Abs(costh5*ds5)));
          //testh->Fill(0.01*ds5);
          //testh->Fill(theta6);
          //if( ds5*sqrt(costh5*costh5)<2.0 ) cout << eventNum << " ";
        }
        else{ testnonh->Fill(ds0);
	  ParaPerpNC->Fill(ds2*(TMath::Abs(costh2)), ds2*sinth2);
	  TotalDistNC->Fill(ds2);
	  NFilterDigitsNC->Fill(nFilterDigits);
	}
        //else{ testnonh->Fill(coss); test2nonh->Fill(DisttoWall,trueDirZ); }
        //else cout << eventNum << " " << extendedVtxPass << " " << ds0 << " " << ds5*(TMath::Abs(costh5)) << endl; }
        //cout << eventNum << " " << extendedVtxPass << " " << ds0 << " " << ds5*(TMath::Abs(costh5)) << endl;
        //}
      }
   
    }

  }

  Double_t norm = testconh->Integral();
  //testconh->Scale(1/norm);
  norm = testnonh->Integral();
  //testnonh->Scale(1/norm);
  testconh->GetXaxis()->SetTitle("Ltrack [cm]");
  testconh->GetYaxis()->SetTitle("Events");
  testconh->SetLineWidth(2.0);
  testnonh->SetLineWidth(2.0);
  testnonh->SetLineColor(kRed);
  test2conh->GetXaxis()->SetTitle("Vtx to Wall [cm]");
  test2conh->GetYaxis()->SetTitle("Ltrack [cm]");
  test2conh->SetMarkerSize(0.5);
  test2nonh->SetMarkerSize(0.5);
  test2nonh->SetMarkerColor(kRed);
  testconh->Draw();
  //testnonh->Draw("Same");
  //testconh->Draw("Same");

  //cout << drmax << endl;
  //cout << aaa << " " << bbb << " " << ccc << endl; 

//============ calculate uncertainty =========================
  //Double_t lower = 0.32*ctr_extended_fit_pass;
  //Double_t mid = 0.5*ctr_extended_fit_pass;
  Double_t level = 0.68*ctr_extended_fit_pass;
  Double_t totalcontent = 0.0;
  Double_t totalerr = 0.0;
  Int_t iupper = 0;
  Int_t ilower = 0;
  Int_t imid = 0;

  Double_t content[nbin];
  Double_t binerr[nbin];
  testconh->Sumw2();
  for( Int_t j=0;j<nbin;j++ ){
    content[j] = testconh->GetBinContent(j);
    Double_t ierr = testconh->GetBinError(j);
    binerr[j] = ierr*ierr;
  }
   
  do{
    totalcontent += content[iupper];
    totalerr += binerr[iupper];
    iupper += 1; 
    //cout << iupper << " " << content << " " << binerr << " " << totalerr << endl;
  } while( (totalcontent-sqrt(totalerr)) < level );
  Double_t upper = (iupper - 1.0)*range/nbin + (range/nbin)*(level - totalcontent + sqrt(totalerr) + content[iupper-1])/content[iupper-1];
  
  totalcontent = 0.0;
  totalerr = 0.0;
  do{
    totalcontent += content[imid];
    totalerr += binerr[imid];
    imid += 1; 
    //cout << imid << " " << content << " " << binerr << " " << totalerr << endl;
  } while( (totalcontent) < level );
  Double_t mid = (imid - 1.0)*range/nbin + (range/nbin)*(level - totalcontent + content[imid-1])/content[imid-1];
  //cout << imid << " " << range/nbin << " " << content[imid-1] << " " << (level  - totalcontent + content[imid-1]) << endl;
  
  totalcontent = 0.0;
  totalerr = 0.0;
  do{
    totalcontent += content[ilower];
    totalerr += binerr[ilower];
    ilower += 1; 
    //cout << ilower << " " << content << " " << binerr << " " << totalerr << endl;
  } while( (totalcontent+sqrt(totalerr)) < level );
  Double_t lower = (ilower - 1.0)*range/nbin + (range/nbin)*(level - totalcontent - sqrt(totalerr) + content[ilower-1])/content[ilower-1];

  std::cout << "(" << mid << ", -" << mid-lower << ", +" << upper-mid << ")" << std::endl;

//======================================================================

  // Print Some Results
  if( ctr_extended_fit>0.0 ) ctr_extended_fit_pass_frac = ctr_extended_fit_pass/ctr_extended_fit;
  std::cout << " Number of fitted tracks [extended fit] = " << ctr_extended_fit << std::endl;
  std::cout << " Number of converged tracks [extended fit] = " << ctr_extended_fit_pass << std::endl;
  std::cout << "  Fraction of converged tracks [extended fit] = " << ctr_extended_fit_pass_frac << std::endl;
  

  (ParaPerpC->GetXaxis())->SetTitle("para");
  (ParaPerpC->GetYaxis())->SetTitle("perp");
  ParaPerpC->SetMarkerStyle(34);
  ParaPerpC->Draw(); 
  ParaPerpNC->SetMarkerStyle(24);
  ParaPerpNC->SetMarkerColor(kRed);
  ParaPerpNC->Draw("same");
  leg=new TLegend(0.65,0.75,0.9,0.9,"");
  leg->AddEntry(PPC,"Convergent","p");
  leg->AddEntry(PPNC,"Not Convergent","p");
  leg->Draw();


  TCanvas *ca2 = new TCanvas("ca2","",800,600); 
  (TotalDistC->GetXaxis())->SetTitle("Norm(true-point)");
  (TotalDistC->GetYaxis())->SetTitle("NoEvents");
  TotalDistC->Draw();
  TotalDistNC->SetLineColor(kRed);
  TotalDistNC->Draw("same");
  leg2=new TLegend(0.65,0.75,0.9,0.9,"");
  leg2->AddEntry(DC,"Convergent","l");
  leg2->AddEntry(DNC,"Not Convergent","l");
  leg2->Draw();


 TCanvas *ca3 = new TCanvas("ca3","ca3",800,600); 
 (NFilterDigitsC->GetXaxis())->SetTitle("NFilterDigits");
 (NFilterDigitsC->GetYaxis())->SetTitle("NoEvents");
 NFilterDigitsC->Draw();
 NFilterDigitsNC->SetLineColor(kRed);
 NFilterDigitsNC->Draw("same");

}
