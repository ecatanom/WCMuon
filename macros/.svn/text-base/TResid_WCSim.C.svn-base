{
  // Load libraries
  // ==============
  gSystem->Load("libGeom");
  gSystem->Load("libEve");
  gSystem->Load("libMinuit");
  gSystem->Load("libCintex");
  
  gSystem->Load("libWCSimRootDict");
  gSystem->Load("libWCSimRoot.so");
  gSystem->Load("libWCSimAnalysis.so");
  
  // Path to WCSim ROOT file
  // =======================
  //TString filename("/lbne/data/water/sim200kton_20111017/singleparticle/rootfiles/muon_plus_001200MeV_200kton.0001.root");
  //TString filename("/lbne/app/users/wetstein/SamplesForTian/MatchingEvents_newWCSim/Evt8.root");
  //TString filename("/lbne/app/users/txin/WCSim/branches/dev/DetectorDevelopment/wcsim.root");  
  TString filename("/lbne/data/water/sim200kton_20111017/singleparticle/wcsimlc/muon_plus_001200MeV_200kton.0001_13percentbare_DetDev_noMuonScat.root");
  //TString filename("/lbne/data/water/sim200kton_20111017/singleparticle/wcsimlc/muon_plus_001200MeV_200kton.0001_50percent_DetDev_noMuSct.root");
  //TString filename("/lbne/data/water/sim200kton_20111017/singleparticle/wcsimlc/muon_plus_001200MeV_200kton.0001_13percentbare_DetDev_noMuonScat.root");
  //TString filename("/lbne/data/water/sim200kton_20111017/singleparticle/wcsimlc/muon_plus_001200MeV_200kton.0001_13percentbare_DetDev_noMuon_noMie.root");


  // Load Data
  // =========
  WCSimInterface::LoadData(filename);

  // get first entry
  Bool_t truehit = 1; // 1 is to use true hits
  Bool_t filtered =1; // 1 is to use Andy's cut
  Bool_t Lmu = 0; // 1 is to use LMuon cut
  Bool_t drawd = 1; // 1 is to draw the distance plot at the end
  if(truehit) {WCSimInterface::SetToUseTrueHits();
  WCSimInterface::Instance()->SmearTrueHits(0.1);}
  WCSimDataCleaner::Instance()->NeighbourRadius(300.0);
  WCSimDataCleaner::Instance()->NeighbourDigits(50.0);
  //WCSimDataCleaner::Instance()->TimeWindow(25.0);
  WCSimDataCleaner::Instance()->SetMinPulseHeight(-1.0);
  WCSimInterface::LoadEvent(0);

  //cout << sin(90.0) << endl;
  double mind = -500.0;
  double maxd = 1000.0;
  int nbin = 150;
  TH1D* h1 = new TH1D("h1", "",nbin,mind,maxd);
  TH1D* h2 = new TH1D("h2", "",nbin,mind,maxd);
  TH1D* h3 = new TH1D("h3", "",nbin,mind,maxd);
  TH1D* h4 = new TH1D("h4", "",nbin,mind,maxd);
  TH1D* h5 = new TH1D("h5", "",nbin,mind,maxd);
  TH1D* Prob = new TH1D("Prob","",1500,-50.,250.);
  TH1D* diff = new TH1D("diff","",1500,-50.,250.);
  TH1D *dphot = new TH1D("dphot", "", 80, mind, maxd);
  TH1D *dphot2 = new TH1D("dphot2", "", 80, mind, maxd);
  TH2D *d = new TH2D("d","",300, mind, maxd, 100, -5.0, 20.0);
  Double_t TResid, LPhot, LMuon;
  double bdeltaT, rdeltaT;
  // build event
  // WCSimInterface::BuildEvent(myEvent);
  WCSimTrueEvent* trueEvent = WCSimInterface::TrueEvent();
  WCSimRecoEvent* recoEvent = WCSimInterface::RecoEvent();

  WCSimRecoAB* haReco = new WCSimRecoAB(); //run filters
  if(filtered) haReco->RunFilter(recoEvent);

  int myNdigits = recoEvent->GetNDigits();
  int NFilterdigits = recoEvent->GetNFilterDigits();

  double *index1 = new double[NFilterdigits];
  double *index2 = new double[NFilterdigits];
  double *index3 = new double[NFilterdigits];
  double *index4 = new double[NFilterdigits];
  double *index5 = new double[NFilterdigits];
  // get true quantities
  Double_t trueX = trueEvent->GetVtxX();
  Double_t trueY = trueEvent->GetVtxY();
  Double_t trueZ = trueEvent->GetVtxZ(); 
  Double_t dirX = trueEvent->GetDirX();
  Double_t dirY = trueEvent->GetDirY();
  Double_t dirZ = trueEvent->GetDirZ();
  Double_t trueT = 0.0;
  double theta = (TMath::Pi())/2.0 - atan(dirZ/sqrt(dirX*dirX+dirY*dirY)); //theta = theta + 3.0/41.0;
  double phi = 0.0;
  if( dirX<0.0 ) phi = TMath::Pi() - asin(dirY/sqrt(dirX*dirX+dirY*dirY));
  else if( dirY>0.0 ) phi = asin(dirY/sqrt(dirX*dirX+dirY*dirY));
  else if( dirY<0.0 ) phi = 2.0*TMath::Pi() + asin(dirY/sqrt(dirX*dirX+dirY*dirY));
  //else( dirY=0.0 ) phi = 0.0;
  dirX = cos(phi)*sin(theta);
  dirY = sin(phi)*sin(theta);
  dirZ = cos(theta);
  //trueX = 1569.0;
  //double size = 500.0;
  //trueX = 1530.0;
  //trueY = trueY + size*dirY;
  //trueZ = trueZ + size*dirZ;
  //Double_t j = -5.0;
  //Double_t size = 50.0/21.0;
  //trueX = trueX + j*dirX*size;
  //trueY = trueY + j*dirY*size;
  //trueZ = trueZ + j*dirZ*size;

  int ifilter = 0;
  for(int i=0.; i<myNdigits; i++){

   WCSimRecoDigit* adigit = recoEvent->GetDigit(i);
   if( adigit->IsFiltered() || !filtered ){ //if the hit passed the filter
    double hitX = adigit->GetX();
    double hitY = adigit->GetY();
    double hitZ = adigit->GetZ();
    double hitT = adigit->GetTime();
    double qpes = adigit->GetQPEs();
    double res = WCSimParameters::TimeResolution(qpes); 

    //for( int j=0;j<5;j++ ){
    //double index = 1.33 + (j+0.5)*0.01;
     WCSimVertexGeometry::CalcTResidColor(trueX, trueY, trueZ, trueT, dirX, dirY, dirZ, hitX, hitY, hitZ, hitT, 1.333, TResid, LPhot,LMuon); 
     h1->Fill(LMuon);
     WCSimVertexGeometry::CalcTResidColor(trueX, trueY, trueZ, trueT, dirX, dirY, dirZ, hitX, hitY, hitZ, hitT, 1.38, TResid, LPhot,LMuon); 
     h2->Fill(LMuon);
     WCSimVertexGeometry::CalcTResidColor(trueX, trueY, trueZ, trueT, dirX, dirY, dirZ, hitX, hitY, hitZ, hitT, (1.38*29.0/30.0), TResid, LPhot,LMuon); 
     h3->Fill(LMuon);
     //if( j==0 ){ index1[ifilter]=TResid; h1->Fill(TResid); }
     //if( j==1 ){ index2[ifilter]=TResid; h2->Fill(TResid); }
     //if( j==2 ){ index3[ifilter]=TResid; h3->Fill(TResid); }
     //if( j==3 ){ index4[ifilter]=TResid; h4->Fill(TResid); }
     //if( j==4 ){ index5[ifilter]=TResid; h5->Fill(TResid); }

    //}
     //d->Fill(LMuon,TResid);
    //double Pchrom = 0.0; //WCSimTResidPDF::Instance()->MakeChromPeakPDF(TResid,LPhot,0.1);   
     //double distphot = LPhot;
     //double distmuon = LMuon;  
    //WCSimVertexGeometry::Instance()->CorrectChereAngle(17.0, distphot, distmuon);
    //if(Pchrom>0.0) h1->Fill(log(Pchrom));
    //if( (bdeltaT<=0.0)&&(0.0<=rdeltaT) ){	
    //if( (LMuon>0.0 && LMuon<=800.0) || !Lmu ){
     // h1->Fill(TResid);
   ifilter++; }
  }
  cout << "WCSim" << endl;
//================ calculate chi2 ========================================
  //double rms = TMath::RMS(NFilterdigits,index1); cout << rms << " ";
  //double rms = TMath::RMS(NFilterdigits,index2); cout << rms << " ";
  //double rms = TMath::RMS(NFilterdigits,index3); cout << rms << " ";
  //double rms = TMath::RMS(NFilterdigits,index4); cout << rms << " ";
  //double rms = TMath::RMS(NFilterdigits,index5); cout << rms << endl;
//======================================================================================
//PDF
  /*WCSimWaterModel *wm2 = WCSimWaterModel::Instance();
  WCSimTResidPDF *pdf = WCSimTResidPDF::Instance();
  Double_t sigma0 = 0.1; //sigma0 = 0.1;
  Double_t delta, dist, distmu;
  Double_t Preal, Norm, weight, Pgauss;
  for( Int_t jj=0;jj<300;jj++ ){
     delta = 0.2*(jj+0.5) - 20.0;
     Preal = 0.0; 
     Norm = 0.0;
     for( Int_t ii=0;ii<3;ii++ ){
        dist = (ii+0.5)*(maxd-mind)/30.0+mind;
        if(!truehit){
          for( Int_t kk=0;kk<5;kk++ ){
             sigma0 = (kk+0.5)*0.4 + 0.5; //sigma0 = 0.4247*sigma0;
             Pgauss = pdf->MakeChromPeakPDF(delta,dist,sigma0); 
             weight = (Double_t)d->GetBinContent(ii,kk);
             Norm += weight;
	     Preal += (0.2*weight)*(Pgauss);
          }
        }
        else{
          Pgauss = pdf->MakeChromPeakPDF(delta,dist,sigma0);
          weight = (Double_t) dphot->GetBinContent(ii);
          Norm +=weight;
          Preal += (0.2*weight)*(Pgauss);
        }
     }
     if( Norm != 0.0) Preal = Preal/Norm; 
     Prob->Fill(delta, Preal);
  }*/
  std::cout << "PDF" << std::endl;
//============================================================================================
  /*Double_t haha = h1->Integral();
  h1->Scale(1.0/haha);
  Prob->Scale(jiji);
  for(int k=0;k<1000;k++){
    double t = 0.2*(k+0.5)-50.0;
    double tr = h1->GetBinContent(k);
    double pp = Prob->GetBinContent(k);
    double ndf = sqrt(tr);
    if(ndf != 0.0 ) diff->SetBinContent(k, (tr-pp)/ndf);
  }*/
//============================================================================================
  /*Prob->SetLineColor(kBlue); Prob->SetLineWidth(2.5);
  (diff->GetXaxis())->SetTitle("Time Residual (ns)");
  (diff->GetYaxis())->SetTitle("(TResid-PDF)/sqrt(TResid)");*/
  //TCanvas* can2 = new TCanvas("can2","",500,800);
  //can2->Divide(1,2);
  //can2->cd(1);
  //TLegend *mylegend3 = new TLegend(0.6,0.7,0.9,0.9,"");
  //mylegend3->AddEntry(Prob, "ChromPDF", "l");
  //mylegend3->Draw();
  //d->SetMarkerSize(0.3); d->Draw();
  //(dphot->GetXaxis())->SetTitle("Lmuon (cm)");
  //(dphot->GetYaxis())->SetTitle("Entries");
  h1->SetLineColor(kRed); h1->SetLineWidth(2.0); 
  (h1->GetXaxis())->SetTitle("muon distance (ns)");
  (h1->GetYaxis())->SetTitle("Entries");
  h2->SetLineColor(kBlue); h2->SetLineWidth(2.0);
  h3->SetLineColor(kGreen+3); h3->SetLineWidth(2.0);
  h4->SetLineColor(kOrange+7); h4->SetLineWidth(2.0);
  h5->SetLineColor(kRed+1); h5->SetLineWidth(2.0);
  h1->Draw(); h2->Draw("Same"); h3->Draw("Same"); //h4->Draw("Same"); h5->Draw("Same");

  TLegend *mylegend = new TLegend(0.5,0.75,0.9,0.9,"");
  mylegend->AddEntry(h1, "index = 1.333, vmuon = 30.0 cm/ns", "l");
  mylegend->AddEntry(h2, "index = 1.38, vmuon = 30.0 cm/ns", "l");
  mylegend->AddEntry(h3, "index = 1.38, vmuon = 29.0 cm/ns", "l");
  mylegend->Draw();
  cout << "digits: " << myNdigits << " filter digits: " << NFilterdigits << endl;

  //if(drawd){ dphot2->SetLineColor(kRed); dphot->SetLineWidth(2.0); dphot2->SetLineWidth(2.0); dphot->Draw(); dphot2->Draw("Same"); mylegend3->Draw(); }
  
 
}
